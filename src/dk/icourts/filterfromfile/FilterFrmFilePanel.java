package dk.icourts.filterfromfile;

import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.*;

/**
 * Panel for the {@link FilterFromFile} filter
 * @author Yannis Panagis
 */
public class FilterFrmFilePanel extends javax.swing.JPanel {
    private JFileChooser chooser;
    private FilterFromFile filter;

    /**
     * Creates new form FilterFrmFilePanel
     */
    public FilterFrmFilePanel(FilterFromFile filter) {
        this.filter = filter;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fileTextField = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();
        neighbors = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        fileTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fileTextField.setText(org.openide.util.NbBundle.getMessage(FilterFrmFilePanel.class, "FilterFrmFilePanel.fileField.text")); // NOI18N
        fileTextField.setMaximumSize(new java.awt.Dimension(30, 50));
        fileTextField.setMinimumSize(new java.awt.Dimension(30, 50));
        fileTextField.setName("fileField"); // NOI18N
        fileTextField.setPreferredSize(new java.awt.Dimension(160, 20));
        fileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(fileTextField, gridBagConstraints);

        openButton.setText(org.openide.util.NbBundle.getMessage(FilterFrmFilePanel.class, "FilterFrmFilePanel.openButton.text")); // NOI18N
        openButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(openButton, gridBagConstraints);

        neighbors.setToolTipText(org.openide.util.NbBundle.getMessage(FilterFrmFilePanel.class, "FilterFrmFilePanel.neighbors.toolTipText")); // NOI18N
        neighbors.setLabel(org.openide.util.NbBundle.getMessage(FilterFrmFilePanel.class, "FilterFrmFilePanel.label")); // NOI18N
        neighbors.setName(""); // NOI18N
        neighbors.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                neighborsItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(neighbors, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileTextFieldActionPerformed

    private void openButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openButtonMouseClicked
        Logger.getLogger(FilterFrmFilePanel.class.getName()).info(
                "Trying to open dialog"
        );
        System.err.println("Tyring to open filed chooser");
        chooser = new JFileChooser();
        FileFilter ff = new FileNameExtensionFilter("Text files", "txt");
        chooser.addChoosableFileFilter(ff);
        int returnVal = chooser.showOpenDialog(this);
          if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            
            try {
                this.fileTextField.setText(file.getCanonicalPath());
                ArrayList<String> nodesToKeep = this.readLines(file);
                for (String s: nodesToKeep){
                    System.out.println(s);
                }
                filter.setNodesToKeep(new HashSet<String>(nodesToKeep));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FilterFrmFilePanel.class.getName())
                        .severe(String.format("File %s not found", file));
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
            } else {
                Logger.getLogger(FilterFrmFilePanel.class.getName())
                        .info("Open command cancelled by user.");
            }
        // TODO add your handling code here:
    }//GEN-LAST:event_openButtonMouseClicked

    private void neighborsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_neighborsItemStateChanged
        Boolean neighbors = false;
        if (evt.getStateChange() == ItemEvent.SELECTED){
            System.out.println("Selected");
            neighbors = true;
        } else if (evt.getStateChange() == ItemEvent.DESELECTED){
            neighbors = false;
        }
        this.filter.setNeighbors(neighbors);
    }//GEN-LAST:event_neighborsItemStateChanged

    private ArrayList<String> readLines(File txtFile) throws FileNotFoundException{
        BufferedReader reader = new BufferedReader(
                new FileReader(txtFile));
        String line = "";
        ArrayList<String> lines = new ArrayList<String>();
        try {
            while((line = reader.readLine()) != null){
                lines.add(line.trim());
            }
        } catch (IOException ex) {
            Logger.getLogger(FilterFrmFilePanel.class.getName()).severe(
                    "I/O exception in file:" + txtFile
            );
            Exceptions.printStackTrace(ex);
        }
        return lines;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fileTextField;
    private javax.swing.JCheckBox neighbors;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables
}
